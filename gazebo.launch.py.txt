#!/usr/bin/env python3
import os

from ament_index_python.packages import get_package_share_directory
from launch import LaunchDescription
from launch.actions import IncludeLaunchDescription, RegisterEventHandler
from launch.event_handlers import OnProcessExit
from launch.launch_description_sources import PythonLaunchDescriptionSource
from launch_ros.actions import Node
from launch_ros.parameter_descriptions import ParameterValue
from launch.substitutions import Command, FindExecutable


def generate_launch_description():
    pkg_share = get_package_share_directory('my_nav2_pkg')

    # Path to URDF xacro
    urdf_file = os.path.join(pkg_share, 'urdf', 'car.xacro')

    # Path to controllers.yaml
    controllers_yaml = os.path.join(pkg_share, 'config', 'car_controllers.yaml')

    # Path to world
    world_file = os.path.join(pkg_share, 'worlds', 'my_worlds.sdf')

    # Process Xacro into URDF
    robot_description_content = Command([
        FindExecutable(name='xacro'),
        ' ',
        urdf_file
    ])
    robot_description = {
        'robot_description': ParameterValue(robot_description_content, value_type=str)
    }

    # Shared parameters
    sim_time_param = {'use_sim_time': True}

    # --- Launch Gazebo Classic ---
    gazebo = IncludeLaunchDescription(
        PythonLaunchDescriptionSource(
            os.path.join(
                get_package_share_directory('gazebo_ros'),
                'launch',
                'gazebo.launch.py'   # Gazebo Classic launcher
            )
        ),
        launch_arguments={
            'world': world_file,
            'verbose': 'true'
        }.items()
    )

    # --- Robot State Publisher ---
    rsp = Node(
        package='robot_state_publisher',
        executable='robot_state_publisher',
        output='screen',
        parameters=[robot_description, sim_time_param]
    )

    # --- Spawn Entity ---
    spawn_entity = Node(
        package='gazebo_ros',
        executable='spawn_entity.py',
        arguments=['-topic', 'robot_description', '-entity', 'my_car'],
        output='screen'
    )

    # --- Controllers ---
    jsb_spawner = Node(
        package='controller_manager',
        executable='spawner',
        arguments=['joint_state_broadcaster', '-c', '/controller_manager'],
        output='screen'
    )

    steering_spawner = Node(
        package='controller_manager',
        executable='spawner',
        arguments=['steering_position_controller', '-c', '/controller_manager'],
        output='screen'
    )

    wheel_spawner = Node(
        package='controller_manager',
        executable='spawner',
        arguments=['wheel_velocity_controller', '-c', '/controller_manager'],
        output='screen'
    )

    return LaunchDescription([
        gazebo,
        rsp,
        spawn_entity,
        jsb_spawner,
        RegisterEventHandler(
            OnProcessExit(
                target_action=jsb_spawner,
                on_exit=[steering_spawner, wheel_spawner]
            )
        )
    ])
